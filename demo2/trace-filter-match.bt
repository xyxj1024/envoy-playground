#!/usr/local/bin/bpftrace

struct virtualobj {
    long long unsigned int vtableAnchorAddr;
    void *other;
};

struct typeinfo {
    void *helper;
    char *typename;
    struct typeinfo* parentTypeInfo; 
};


struct vtable {
    long long int parent_offset;
    struct typeinfo *typeinfo;
    void *anchor;
};

struct compressed_ptr_pair_elem {
    void *__value_;
};

struct share_ptr {
    void *__ptr_;
    char pad[8];
};

struct unique_ptr {
    struct compressed_ptr_pair_elem  __ptr_;
};

struct ConnectionSocketImpl {
    void *a;
};

struct AcceptedSocketImpl {
    char pad[0x10];
    struct share_ptr address_provider_;
};

struct absl_optional_uint64_t {
    bool engaged_;
    char pad[7];
    unsigned long data_;
};

struct SocketAddressSetterImpl {
    char pad1[8];
    struct share_ptr local_address_;
    bool local_address_restored_;
    char pad2[7];
    struct share_ptr remote_address_;
    struct share_ptr direct_remote_address_;
    char pad3[88-48-16];
    struct absl_optional_uint64_t connection_id_;
};

struct Ipv4Instance {
    char pad1[66];
    unsigned short sin_port;
    int s_addr;
};

struct ActiveTcpSocket {
    char pad[48];
    struct virtualobj* pConnectionSocket_socket_;
};


BEGIN
{
}

uprobe:/proc/ENVOY_PID/root/usr/local/bin/envoy:_ZN5Envoy6Server15ActiveTcpSocketC2ERNS0_17ActiveTcpListenerEONSt3__110unique_ptrINS_7Network16ConnectionSocketENS4_14default_deleteIS7_EEEEb
/pid == ENVOY_PID/ 
{ 
    $ActiveTcpSocket = arg0;
    printf("\n***** elapsed=%d: tid=%d,comm=%s: ActiveTcpSocket::ActiveTcpSocket arg0=%p\n", 
        elapsed, tid, comm, $ActiveTcpSocket);

    $p_share_ptr_socket = (struct unique_ptr *)arg2;
    $pConnectionSocket = (struct ConnectionSocketImpl *)($p_share_ptr_socket->__ptr_.__value_);
    printf("pConnectionSocket=%p\n", $pConnectionSocket);

    $pVirtualobj = (struct virtualobj *)$pConnectionSocket;
    $pAnchor = $pVirtualobj->vtableAnchorAddr;
    $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
    printf("parent_offset=%d\n", $pVtable->parent_offset);
    $pTypeInfo = $pVtable->typeinfo;
    printf("pTypeInfoConnectionSocket->typename=%s\n", str($pTypeInfo->typename));

    if( str($pTypeInfo->typename) == "N5Envoy7Network18AcceptedSocketImplE" ) {
        printf("type is Envoy::Network::AcceptedSocketImpl\n");
        $pAcceptedSocketImpl = (struct AcceptedSocketImpl *)((uint64)$pConnectionSocket + $pVtable->parent_offset);
        printf("pAcceptedSocketImpl=%p\n", $pAcceptedSocketImpl);

        $pSocketAddressSetterImpl = (struct SocketAddressSetterImpl *)($pAcceptedSocketImpl->address_provider_.__ptr_ );
        printf("pSocketAddressSetterImpl=%p\n", $pSocketAddressSetterImpl);

        $pVirtualobj = (struct virtualobj *)($pSocketAddressSetterImpl->remote_address_.__ptr_);
        $pAnchor = $pVirtualobj->vtableAnchorAddr;
        $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
        $pTypeInfo = $pVtable->typeinfo;
        if( str($pTypeInfo->typename) == "N5Envoy7Network7Address12Ipv4InstanceE" ) {
            $p_remote_address = (struct Ipv4Instance *)((uint64)$pVirtualobj + $pVtable->parent_offset);

            // Destination port is big endian, it must be flipped
            $bigEndianPort = $p_remote_address->sin_port;
            $port = ($bigEndianPort >> 8) | (($bigEndianPort << 8) & 0x00FF00);

            printf("p_remote_address->sin_port=%d, p_remote_address->s_addr=%s \n", 
                $port, ntop($p_remote_address->s_addr));
        }
        
        $pVirtualobj = (struct virtualobj *) ($pSocketAddressSetterImpl->local_address_.__ptr_);
        $pAnchor = $pVirtualobj->vtableAnchorAddr;
        $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
        $pTypeInfo = $pVtable->typeinfo;
        if( str($pTypeInfo->typename) == "N5Envoy7Network7Address12Ipv4InstanceE" ) {
            $local_address_ = (struct Ipv4Instance*) ((uint64)$pVirtualobj + $pVtable->parent_offset);

            // Destination port is big endian, it must be flipped
            $bigEndianPort = $local_address_->sin_port;
            $port = ($bigEndianPort >> 8) | (($bigEndianPort << 8) & 0x00FF00);

            printf("local_address_->sin_port=%d, local_address_->s_addr=%s \n", 
                $port, ntop($local_address_->s_addr));
        }

        $pVirtualobj = (struct virtualobj *)($pSocketAddressSetterImpl->direct_remote_address_.__ptr_);
        $pAnchor = $pVirtualobj->vtableAnchorAddr;
        $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
        $pTypeInfo = $pVtable->typeinfo;
        if( str($pTypeInfo->typename) == "N5Envoy7Network7Address12Ipv4InstanceE" ) {
            $direct_remote_address_ = (struct Ipv4Instance*) ((uint64)$pVirtualobj + $pVtable->parent_offset);

            // Destination port is big endian, it must be flipped
            $bigEndianPort = $direct_remote_address_->sin_port;
            $port = ($bigEndianPort >> 8) | (($bigEndianPort << 8) & 0x00FF00);

            printf("direct_remote_address_->sin_port=%d, direct_remote_address_->s_addr=%s \n", 
                $port, ntop($direct_remote_address_->s_addr));
        }             

        printf("connection_id_.engaged_=%d, connection_id_.data_=%d \n", 
            $pSocketAddressSetterImpl->connection_id_.engaged_,
            $pSocketAddressSetterImpl->connection_id_.data_);
    }
}


uprobe:/proc/ENVOY_PID/root/usr/local/bin/envoy:*TlsInspector*Filter*done*
/pid == ENVOY_PID/ 
{
    printf("\n***** elapsed=%d: tid=%d,comm=%s: *TlsInspector*Filter*.done() this=%p\n", 
        elapsed, tid, comm, arg0);

    $pTlsInspector_Filter = (struct TlsInspector_Filter *)arg0;

    $pListenerFilterCallbacks = $pTlsInspector_Filter->cb_;

    $pVirtualobj = $pListenerFilterCallbacks;
    $pAnchor = $pVirtualobj->vtableAnchorAddr;
    $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
    $pTypeInfo = $pVtable->typeinfo;
    $pActiveTcpSocket = (struct ActiveTcpSocket *)((uint64)$pVirtualobj + $pVtable->parent_offset);

    $pConnectionSocket = $pActiveTcpSocket->pConnectionSocket_socket_;

    $pVirtualobj = $pConnectionSocket;
    $pAnchor = $pVirtualobj->vtableAnchorAddr;
    $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
    $pTypeInfo = $pVtable->typeinfo;
    $pAcceptedSocketImpl = (struct AcceptedSocketImpl *)((uint64)$pVirtualobj + $pVtable->parent_offset);

    $pSocketAddressSetterImpl = (struct SocketAddressSetterImpl *)($pAcceptedSocketImpl->address_provider_.__ptr_ );
    printf("pSocketAddressSetterImpl=%p\n", $pSocketAddressSetterImpl);

    printf("connection_id_.engaged_=%d, connection_id_.data_=%d \n", 
        $pSocketAddressSetterImpl->connection_id_.engaged_,
        $pSocketAddressSetterImpl->connection_id_.data_);
}

uprobe:/proc/ENVOY_PID/root/usr/local/bin/envoy:*onRead*
/pid == ENVOY_PID/ 
{
    printf("\n***** elapsed=%d: tid=%d,comm=%s: %s this=%p\n", elapsed, tid, comm, func,arg0);
    printf("%s\n", ustack());
}

uprobe:/proc/ENVOY_PID/root/usr/local/bin/envoy:*TlsInspector*onRead*
/pid == ENVOY_PID/
{
    printf("\n***** elapsed=%d: tid=%d,comm=%s: *TlsInspector*.onRead() this=%p\n", 
        elapsed, tid, comm, arg0);  

    $pTlsInspector_Filter = (struct TlsInspector_Filter *)arg0;
    $pListenerFilterCallbacks = $pTlsInspector_Filter->cb_;
    $pVirtualobj = $pListenerFilterCallbacks;
    $pAnchor = $pVirtualobj->vtableAnchorAddr;
    $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
    $pTypeInfo = $pVtable->typeinfo;
    $pActiveTcpSocket = (struct ActiveTcpSocket *)((uint64)$pVirtualobj + $pVtable->parent_offset);

    $pConnectionSocket = $pActiveTcpSocket->pConnectionSocket_socket_;

    $pVirtualobj = $pConnectionSocket;
    $pAnchor = $pVirtualobj->vtableAnchorAddr;
    $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
    $pTypeInfo = $pVtable->typeinfo;
    $pAcceptedSocketImpl = (struct AcceptedSocketImpl *)((uint64)$pVirtualobj + $pVtable->parent_offset);

    $pSocketAddressSetterImpl = (struct SocketAddressSetterImpl *)($pAcceptedSocketImpl->address_provider_.__ptr_ );
    printf("pSocketAddressSetterImpl=%p\n", $pSocketAddressSetterImpl);

    $pVirtualobj = (struct virtualobj *)($pSocketAddressSetterImpl->remote_address_.__ptr_);
    $pAnchor = $pVirtualobj->vtableAnchorAddr;
    $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
    $pTypeInfo = $pVtable->typeinfo;
    if( str($pTypeInfo->typename) == "N5Envoy7Network7Address12Ipv4InstanceE" ) {
        $p_remote_address = (struct Ipv4Instance *)((uint64)$pVirtualobj + $pVtable->parent_offset);

        // Destination port is big endian, it must be flipped
        $bigEndianPort = $p_remote_address->sin_port;
        $port = ($bigEndianPort >> 8) | (($bigEndianPort << 8) & 0x00FF00);

        printf("p_remote_address->sin_port=%d, p_remote_address->s_addr=%s \n", 
            $port, ntop($p_remote_address->s_addr));
    }

    $pVirtualobj = (struct virtualobj *)($pSocketAddressSetterImpl->local_address_.__ptr_);
    $pAnchor = $pVirtualobj->vtableAnchorAddr;
    $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
    // printf("parent_offset=%d\n", $pVtable->parent_offset);
    $pTypeInfo = $pVtable->typeinfo;
    // printf("typename=%s\n", str($pTypeInfo->typename));
    if( str($pTypeInfo->typename) == "N5Envoy7Network7Address12Ipv4InstanceE" ) {
        $local_address_ = (struct Ipv4Instance *)((uint64)$pVirtualobj + $pVtable->parent_offset);

        // Destination port is big endian, it must be flipped
        $bigEndianPort = $local_address_->sin_port;
        $port = ($bigEndianPort >> 8) | (($bigEndianPort << 8) & 0x00FF00);

        printf("local_address_->sin_port=%d, local_address_->s_addr=%s \n", 
            $port, ntop($local_address_->s_addr));
    }

    printf("connection_id_.engaged_=%d, connection_id_.data_=%d \n", 
        $pSocketAddressSetterImpl->connection_id_.engaged_,
        $pSocketAddressSetterImpl->connection_id_.data_);
}

uprobe:/proc/ENVOY_PID/root/usr/local/bin/envoy:*restoreLocalAddress*
/pid == ENVOY_PID/ 
{
    printf("\n***** elapsed=%d: tid=%d,comm=%s: SocketAddressSetterImpl::restoreLocalAddress this=%p\n", 
        elapsed, tid, comm, arg0);
        
    $pLocal_address = (struct virtualobj *)(*arg1);
    $pVirtualobj = $pLocal_address;
    $pAnchor = $pVirtualobj->vtableAnchorAddr;
    $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
    $pTypeInfo = $pVtable->typeinfo;
    if( str($pTypeInfo->typename) == "N5Envoy7Network7Address12Ipv4InstanceE" ) {
        $local_address_ = (struct Ipv4Instance *)((uint64)$pVirtualobj + $pVtable->parent_offset);

        // Destination port is big endian, it must be flipped
        $bigEndianPort = $local_address_->sin_port;
        $port = ($bigEndianPort >> 8) | (($bigEndianPort << 8) & 0x00FF00);

        printf("local_address_->sin_port=%d, local_address_->s_addr=%s \n", 
            $port, ntop($local_address_->s_addr));
    }

    $pSocketAddressSetterImpl = (struct SocketAddressSetterImpl *)arg0;

    $pVirtualobj = (struct virtualobj *)($pSocketAddressSetterImpl->remote_address_.__ptr_);
    $pAnchor = $pVirtualobj->vtableAnchorAddr;
    $pVtable = (struct vtable *)(((uint64)$pAnchor) - 16);
    $pTypeInfo = $pVtable->typeinfo;
    if( str($pTypeInfo->typename) == "N5Envoy7Network7Address12Ipv4InstanceE" ) {
        $p_remote_address = (struct Ipv4Instance *)((uint64)$pVirtualobj + $pVtable->parent_offset);

        // Destination port is big endian, it must be flipped
        $bigEndianPort = $p_remote_address->sin_port;
        $port = ($bigEndianPort >> 8) | (($bigEndianPort << 8) & 0x00FF00);

        printf("p_remote_address->sin_port=%d, p_remote_address->s_addr=%s \n", 
            $port, ntop($p_remote_address->s_addr));
    }

    printf("connection_id_.engaged_=%d, connection_id_.data_=%d \n", 
    $pSocketAddressSetterImpl->connection_id_.engaged_,
    $pSocketAddressSetterImpl->connection_id_.data_);
}

END
{
}