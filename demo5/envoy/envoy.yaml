admin:
  access_log_path: /dev/null
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9000

node:
  cluster: service_greeter
  id: test-id

static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 1337 }

      filter_chains:
      - filters:
        - name: envoy.filters.network.http_connection_manager
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            stat_prefix: ingress_http
            codec_type: AUTO
            route_config:
              name: local_route
              virtual_hosts:
              - name: local_service
                domains: ["*"]
                routes:
                - match:
                    prefix: "/"
                    grpc: {}
                  route:
                    host_rewrite_literal: "server.domain.com"
                    cluster: backend
                  request_headers_to_add:
                    - header:
                        key: x-custom-to-backend
                        value: value-for-backend-from-envoy
                      append: true
                  typed_per_filter_config:
                    envoy.filters.http.ext_authz:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                      check_settings:
                        context_extensions:
                          x-forwarded-host: original-host-as-context

            http_filters:
          # - name: envoy.filters.http.lua
            # typed_config:
              # '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              # inlineCode: |
                # function envoy_on_request(request_handle)
                  # request_handle:logInfo('>>> LUA envoy_on_request Called')
                  # --buf = request_handle:body()
                  # --bufbytes = buf:getBytes(0, buf:length())
                  # --request_handle:logInfo(bufbytes)
                # end
                # function envoy_on_response(response_handle)
                  # response_handle:logInfo('>>> LUA envoy_on_response Called')
                  # response_handle:headers():add("X-Custom-Header-From-LUA", "bar")
                # end
            - name: envoy.filters.http.ext_authz
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                transport_api_version: V3
                grpc_service:
                  envoy_grpc:
                    cluster_name: extauthz
            - name: envoy.filters.http.router
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
  - name: backend
    connect_timeout: 0.25s
    http2_protocol_options: {} # avoid HPE_INVALID_CONSTANT
    type: strict_dns
    lb_policy: round_robin
    load_assignment:
      cluster_name: backend
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: host.docker.internal
                port_value: 8123

  - name: extauthz
    connect_timeout: 0.25s
    http2_protocol_options: {} # extauthz cluster must support HTTP/2 for gRPC healthchecking
    type: strict_dns
    lb_policy: round_robin
    load_assignment:
      cluster_name: extauthz
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: host.docker.internal
                port_value: 4040
    common_lb_config:
      healthy_panic_threshold:
        value: 50.0
    health_checks:
      - timeout: 1s
        interval: 5s
        interval_jitter: 1s
        no_traffic_interval: 5s
        unhealthy_threshold: 1
        healthy_threshold: 3
        grpc_health_check:
          service_name: "envoy.service.auth.v3.Authorization"
          authority: "server.domain.com"